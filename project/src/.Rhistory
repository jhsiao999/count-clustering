G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
atan3 <- function(beta2, beta1)
{
if (beta1 > 0)
v <- atan(beta2/beta1);
if(beta2 >=0 & beta1 <0)
v <- pi + atan(beta2/beta1);
if(beta2 <0 & beta1 <0)
v <- -pi + atan(beta2/beta1);
if(beta2 >0 & beta1==0)
v <- pi/2;
if(beta2 <0 & beta1==0)
v <- - (pi/2);
if (v < 0)
v <- v + 2*pi;
# print(v)
#  print(beta1)
#  print(beta2)
return(v)
}
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
sigma <- array(0,G);
amp <- array(0,G); phi <- array(0,G);
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
library(parallel)
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
lmfit_list[[1]]
lmfit_list[[1]]$out_amp
amp <- unlist(lapply(lmfit_list, function(n) return(lmfit_list[[n]]$out_amp)));
amp <- unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp)));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
amp
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
lmfit_list <- parallel::mclapply(1:G, function(g)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
out_amp <- sqrt(beta1^2 + beta2^2);
out_phi <- atan3(as.numeric(beta2), as.numeric(beta1));
ll <- list("out_amp"=out_amp, "out_phi"=out_phi)
}, mc.cores=detectCores())
amp <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_amp))));
phi <- as.numeric(unlist(lapply(1:length(lmfit_list), function(n) return(lmfit_list[[n]]$out_phi))));
amp[1]
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
}
for(g in 1:G)
{
fit <- lm(cycle_data[,g]  ~ sin(cell_times_iter) + cos(cell_times_iter) -1);
sigma[g] <- sd(fit$residuals);
beta1 <- fit$coefficients[1];
beta2 <- fit$coefficients[2];
if(beta1==0 & beta2==0){
stop(paste0("You have a gene with all 0 counts at gene",g));
}
amp[g] <- sqrt(beta1^2 + beta2^2);
phi[g] <- atan3(as.numeric(beta2), as.numeric(beta1));
}
amp[1]
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycler)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
library(cellcycleR)
library(cellcycler)
remove.packages("cellcycler")
library(cellcycler)
remove.packages("cellcycleR")
install_github('kkdey/cellcycleR')
library(cellcycleR)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
library(parallel)
out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100)
plot(amp_genes, out$amp, col="red",xlab="true amplitudes", ylab="est amplitudes", main="amplitudes est, comparison")
plot(sigma_genes, out$sigma, col="red",xlab="true sigma", ylab="est sigma", main="sigma(variation) est, comparison")
plot(phi_genes, out$phi, col="red",xlab="true phi", ylab="est phi", main="phase est, comparison");
library(plotrix)
library(RColorBrewer)
radial.plot(lengths=1:length(out$cell_times),radial.pos=out$cell_times[order(cell_times_sim)],
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(out$cell_times)), lwd=2)
radial.plot(lengths=1:length(cell_times_sim),radial.pos=sort(cell_times_sim),
line.col=colorRampPalette(brewer.pal(9,"Blues"))(length(cell_times_sim)), lwd=2)
library(devtools)
install_github('kkdey/cellcycleR')
library(cellcycleR)
G <- 500;
num_cells <- 400;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE);
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
celltime_levels <- 100;
system.time(out <- cell_ordering_class(cycle_data, celltime_levels = 100, num_iter=100))
sessionInfo()
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(Rcpp)
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(tmcmcR2)
tmcmcR2:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
install_github('kkdey/tmcmcR')
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
install_github('kkdey/tmcmcR2')
library(tmcmcR2)
tmcmcR2:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
sessionInfo()
version
library(devtools)
install_github('kkdey/maptpx')
install_github('taddylab/maptpx')
install_github('taddylab/maptpx')
library(devtools)
install_github('taddylab/maptpx')
library(devtools)
install_github('taddylab/maptpx')
library(devtools)
install_github('taddylab/maptpx')
library(cellcycleR)
G <- 20;
num_cells <- 300;
amp_genes <- rep(10, G);
phi_genes <- runif(G, 0, 2*pi)
sigma_genes <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- sim_sinusoidal_cycle(G, amp_genes, phi_genes, sigma_genes, cell_times_sim);
plot(cycle_data[,1], type="l")
library(wavethresh)
data2=cycle_data[1:(2^8),1]
plot(data2)
wd1 <- wd(data2, filter.number = 1, family="DaubExPhase")
wr1 <- wr(wd1)
plot(wr1, type="l")
wd1$D
length(which(wd1$D > 0)) / length(wd1$D)
95.70-16.97
getwd()
mclapply()
mclapply.hack()
install_github('kkdey/tmcmcR')
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
mclapply.hack()
rmc3()
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
library(parallel)
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
parallel:::mclapply(1:4, function(x) return(x^2))
parallel:::mclapply.hack(1:4, function(x) return(x^2))
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
detectCores()
library(parallel)
library(parallel)
detectCores()
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/7")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
install.packages("Rmosek", repos="http://R-Forge.R-project.org", type="source", INSTALL_opts="--no-multiarch", configure.vars="PKG_MOSEKHOME=/Users/kushal/Documents/mosek/7/tools/platform/osx64x86 PKG_MOSEKLIB=mosek")
install.packages("Rmosek", repos="http://R-Forge.R-project.org", type="source", INSTALL_opts="--no-multiarch", configure.vars="PKG_MOSEKHOME=/Users/kushal/Documents/mosek/7/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
getwd()
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell";
cell_meta[grep("8cell_2pooled", files)]="8cell";
cell_meta[grep("8cell_split", files)]="8cell";
cell_meta[grep("16cell_2pooled", files)]="16cell";
cell_meta[grep("16cell_split", files)]="16cell";
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast");
cell_meta <- cell_meta[-indices_not_reqd];
reads <- reads[,-indices_not_reqd];
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
reads <- reads[,order_of_development];
cell_meta <- cell_meta[order_of_development]
colnames(reads) <- cell_meta;
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
library(data.table)
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell_nd";
cell_meta[grep("8cell_2pooled", files)]="8cell_nd";
cell_meta[grep("8cell_split", files)]="8cell_nd";
cell_meta[grep("16cell_2pooled", files)]="16cell_nd";
cell_meta[grep("16cell_split", files)]="16cell_nd";
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast" | cell_meta =="8cell_nd" | cell_meta == "16cell_nd");
dim(reads)
cell_meta <- cell_meta[-indices_not_reqd];
summary(cell_meta)
unique(cell_meta)
length(cell_meta)
reads <- reads[,-indices_not_reqd];
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
reads <- reads[,order_of_development];
cell_meta <- cell_meta[order_of_development]
colnames(reads) <- cell_meta;
dim(reads)
samp_metadata <- cbind.data.frame(cell_meta);
counts <- t(reads);
colnames(samp_metadata) <- c("dev_phase");
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
library(CountClust)
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
nclus_vec <- 2:7;
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=0.01, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=10, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
install.packages("maptpx")
install.packages("maptpx")
library(maptpx)
StructureObj(as.matrix(counts),nclus_vec,samp_metadata = samp_metadata, tol=10, batch_lab = NULL, path_rda="../../project/rdas/deng_topic_fit.rda",partition=c('TRUE'),path_struct = "../figures/deng_structure");
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
path_struct = "../figures/deng_structure"
num <- 1
metadata <- samp_metadata[,num];
deng_topics <- get(load("../../project/rdas/deng_topic_fit.rda"));
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega[-indices_not_reqd,];
docweights <- docweights[order_of_development,]
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
deng_topics[[1]]
deng_topics[[1]]$omega
dim(deng_topics[[1]]$omega)
dim(deng_topics[[7]]$omega)
dim(deng_topics[[6]]$omega)
cell_meta
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega;
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
dim(docweights)[2]+1
control$color
color
nclus
for(nclus in 1:length(nclus_vec)){
docweights <- deng_topics[[nclus]]$omega;
if(!dir.exists(paste0(path_struct,"/clus_",dim(docweights)[2])))
dir.create(paste0(path_struct,"/clus_",dim(docweights)[2]))
control.default <- list(struct.width=600, struct.height=400, cex.axis=1, cex.main=1.5, las=2, lwd=3,mar.bottom =14, mar.left=2, mar.top=2, mar.right=2,color=2:(dim(docweights)[2]+1));
control <- control.default;
struct.width <- control$struct.width;
struct.height <- control$struct.height;
cex.axis <- control$cex.axis;
cex.main <- control$cex.main;
las <- control$las;
lwd <- control$lwd;
mar.bottom <- control$mar.bottom;
mar.left <- control$mar.left;
mar.top <- control$mar.top;
mar.right <- control$mar.right;
color <- control$color;
png(filename=paste0(path_struct,'/clus_',dim(docweights)[2],'/struct_clus_',dim(docweights)[2],'_',colnames(samp_metadata)[num],'.png'),width=struct.width, height=struct.height);
par(mar=c(mar.bottom,mar.left, mar.top,mar.right))
barplot(t(docweights),col=color,axisnames=F,space=0,border=NA,
main=paste("Structure arranged by",colnames(samp_metadata)[num],": topics=",(nclus+1)),
las=las,ylim=c(0,1),ylab="admix prop", xlab=paste0(colnames(samp_metadata)[num]),
cex.axis=cex.axis,cex.main=cex.main);
labels = match(unique(metadata), metadata);
abline(v=labels-1, lty=1, lwd=lwd)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(metadata),las=las,cex.axis=cex.axis,lwd=lwd);
dev.off()
}
setwd('/Users/kushal/Documents/singleCell-method/project/analysis/')
library(data.table)
reads <- data.frame(fread('../data/Deng cell data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../data/Deng_data/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
unique(cell_meta)
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
files
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell_nd";
cell_meta[grep("8cell_2pooled", files)]="8cell_nd";
cell_meta[grep("8cell_split", files)]="8cell_nd";
cell_meta[grep("16cell_2pooled", files)]="16cell_nd";
cell_meta[grep("16cell_split", files)]="16cell_nd";
unique(cell_meta)
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast" | cell_meta =="8cell_nd" | cell_meta == "16cell_nd");
cell_meta <- cell_meta[-indices_not_reqd];
unique(cell_meta)
files[grep("16cell_2pooled", files)]
files[grep("16cell", files)]
setwd('/Users/kushal/Documents/count-clustering/src/')
library(data.table)
cis_data <- data.frame(fread('../data/GTEX_V6/cis_gene_expression.txt'));
dim(cis_data)
cis_data[1:5,1:5]
samples_id=read.table("../data/GTEX_V6/samples_id.txt")[,3];
samples_id=read.table("../data/GTEX_V6/samples_id.txt")[,3];
samples_id
new_data <- cis_data[,-(1:2)];
dim(new_data)
new_data <- cis_data[,-(1:2)];
rownames(new_data) <- cis_data[,2];
new_data[1:5,1:5]
cis_data[1:5,1:5]
framed_data <- cbind(t(new_data), samples_id);
dim(framed_data)
tail(colnames(framed_data))
df <- framed_data %>% group_by(samples_id) %>% summarise_each(funs(sum))
library(dplyr)
install.packages("dplyr")
library(dplyr)
df <- framed_data %>% group_by(samples_id) %>% summarise_each(funs(sum))
framed_data <- as.data.frame(framed_data);
df <- framed_data %>% group_by(samples_id) %>% summarise_each(funs(sum))
framed_data <- data.frame(framed_data);
dim(framed_data)
df_temp <- framed_data[,c(1:5,16070)];
dim(df_temp)
framed_data <- cbind(t(new_data), samples_id);
framed_data <- data.frame(framed_data);
df_temp <- framed_data[,c(1:15,16070)];
dim(df_temp)
df_temp
new_data <- cis_data[,-(1:2)];
rownames(new_data) <- cis_data[,2];
framed_data <- t(new_data);
framed_data <- data.frame(framed_data);
df_temp <- cbind(framed_data[,1:15], samples_id);
df_temp
df <- df_temp %>% group_by(samples_id) %>% summarise_each(funs(sum))
df
data.frame.df <- data.frame(df);
dim(data.frame.df)
data.frame.df[1:5,1:6]
cis_data <- data.frame(fread('../data/GTEX_V6/cis_gene_expression.txt'));
samples_id=read.table("../data/GTEX_V6/samples_id.txt")[,3];
new_data <- cis_data[,-(1:2)];
rownames(new_data) <- cis_data[,2];
framed_data <- t(new_data);
library(dplyr)
framed_data <- data.frame(framed_data);
df_temp <- cbind(framed_data, samples_id);
df <- df_temp %>% group_by(samples_id) %>% summarise_each(funs(sum))
data.frame.df <- data.frame(df);
dim(data.frame.df)
data.frame.df[1:5,1:5]
wriet.table(data.frame.df, '../data/GTEX_V6/cis_gene_counts_tissuelevel.txt')
write.table(data.frame.df, '../data/GTEX_V6/cis_gene_counts_tissuelevel.txt')
frame <- read.table("../data/GTEX_V6/cis_gene_counts_tissuelevel.txt")
frame[1:5,1:10]
dim(frame)

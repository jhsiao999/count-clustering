require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab=alpha(topic prop fluc),
ylab=gamma(freq fluc))
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat1 <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
phase_mat==phase_mat1
library(data.table)
install.packages("data.table")
install.packages("plyr")
install.packages("data.table")
install_github('kkdey/tmcmcR')
library(devtools)
install_github('kkdey/tmcmcR')
install_github('kkdey/tmcmcR')
library(metrop)
install_github('kkdey/tmcmcR')
topics_theta <- data.frame(fread("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/topics_theta_clus_15_version_1.txt"))[,-1];
sqrt_zscore <- t(apply(topics_theta, 1, function(x)
{
y=sqrt(x);
return((y-mean(y))/sd(y));
}))
log_zscore <- t(apply(topics_theta, 1, function(x)
{
y=log((x)/(1-x));
return((y-mean(y))/sd(y));
}))
K=dim(topics_theta)[2];
KL_score_poisson <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + x - x[n];
return(y)
}));
return(out)
})
KL_score_bernoulli <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + (1 - x[n])*log((1-x[n])/(1-x));
return(y)
}));
return(out)
})
topics_theta <- data.frame(fread("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/topics_theta_clus_15_version_1.txt"))[,-1];
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(qtlcharts)))
suppressMessages(suppressWarnings(library(data.table)))
suppressMessages(suppressWarnings(library(mygene)))
topics_theta <- data.frame(fread("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/topics_theta_clus_15_version_1.txt"))[,-1];
sqrt_zscore <- t(apply(topics_theta, 1, function(x)
{
y=sqrt(x);
return((y-mean(y))/sd(y));
}))
log_zscore <- t(apply(topics_theta, 1, function(x)
{
y=log((x)/(1-x));
return((y-mean(y))/sd(y));
}))
K=dim(topics_theta)[2];
KL_score_poisson <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + x - x[n];
return(y)
}));
return(out)
})
KL_score_bernoulli <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + (1 - x[n])*log((1-x[n])/(1-x));
return(y)
}));
return(out)
})
topics_theta <- data.frame(fread("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/topics_theta_clus_15_version_1.txt"))[,-1];
topics_theta <- data.frame(fread("/Users/kushal/Documents/count-clustering/internal_data/gtex_thinned/topics_theta_clus_15_version_1.txt"))[,-1];
sqrt_zscore <- t(apply(topics_theta, 1, function(x)
{
y=sqrt(x);
return((y-mean(y))/sd(y));
}))
log_zscore <- t(apply(topics_theta, 1, function(x)
{
y=log((x)/(1-x));
return((y-mean(y))/sd(y));
}))
K=dim(topics_theta)[2];
KL_score_poisson <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + x - x[n];
return(y)
}));
return(out)
})
KL_score_bernoulli <- lapply(1:K, function(n)
{
out <- t(apply(topics_theta, 1, function(x)
{
y=x[n] *log(x[n]/x) + (1 - x[n])*log((1-x[n])/(1-x));
return(y)
}));
return(out)
})
indices_mat_poisson=matrix(0,dim(topics_theta)[2],10);
for(k in 1:dim(topics_theta)[2])
{
temp_mat <- KL_score_poisson[[k]][,-k];
vec <- apply(temp_mat, 1, function(x) min(x))
indices_mat_poisson[k,] = order(vec, decreasing = TRUE)[1:10]
}
gene_snp_names_gtex <- data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gene_snp_names.txt',header=FALSE));
gene_names <- substring(gene_snp_names_gtex[,2],1,15);
gene_names_mat_poisson = matrix(gene_names[as.vector(indices_mat_poisson)],nrow=dim(topics_theta)[2]);
color=c("red","blue","cornflowerblue","black","cyan","darkblue",
"brown4","burlywood","darkgoldenrod1","darkgray","deepskyblue","darkkhaki",
"firebrick","darkorchid","hotpink","green","magenta","yellow", "azure1","azure4");
out <- read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/cis_gene_complete_summary_gtex.txt");
dim(out)
par(mfrow=c(1,1))
barplot(rep(1,12),col=color[1:15])
gene_names_mat_poisson[7,]
grep(gene_names_mat_poisson[7,],rownames(topics_theta))
rownames(topics_theta)
topics_theta[,1]
grep(gene_names_mat_poisson[7,],gene_names)
sapply(1:length(gene_names_mat_poisson[7,]), function(n) grep(gene_names_mat_poisson[7,n],gene_names)
)
sapply(1:length(gene_names_mat_poisson[7,]), function(n) grep(gene_names_mat_poisson[7,n],gene_names))
apply(topics_theta[indices,],1, function(x) which.max(x))
indices <- sapply(1:length(gene_names_mat_poisson[7,]), function(n) grep(gene_names_mat_poisson[7,n],gene_names))
apply(topics_theta[indices,],1, function(x) which.max(x))
grep(gene_names_mat_poisson[7,],rownames(topics_theta))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==7);
indices_to_consider
new_genes <- gene_names_mat_poisson[indices_to_consider];
new_genes
lapply(1:10, function(n) out[grep(new_genes, out$query),])
lapply(1:length(new_genes), function(n) out[grep(new_genes, out$query),])
new_genes
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes), out$query),])
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[indices_to_consider];
new_genes
indices_to_consider
indices_mat_poisson=matrix(0,dim(topics_theta)[2],10);
for(k in 1:dim(topics_theta)[2])
{
temp_mat <- KL_score_poisson[[k]][,-k];
vec <- apply(temp_mat, 1, function(x) max(x))
indices_mat_poisson[k,] = order(vec, decreasing = TRUE)[1:10]
}
gene_snp_names_gtex <- data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gene_snp_names.txt',header=FALSE));
gene_names <- substring(gene_snp_names_gtex[,2],1,15);
gene_names_mat_poisson = matrix(gene_names[as.vector(indices_mat_poisson)],nrow=dim(topics_theta)[2]);
color=c("red","blue","cornflowerblue","black","cyan","darkblue",
"brown4","burlywood","darkgoldenrod1","darkgray","deepskyblue","darkkhaki",
"firebrick","darkorchid","hotpink","green","magenta","yellow", "azure1","azure4");
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[indices_to_consider];
new_genes
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(new_genes), function(n) out[as.character(gene_names_mat_poisson[clus,]
), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[as.character(gene_names_mat_poisson[clus,]
), out$query)])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[as.character(gene_names_mat_poisson[clus,]
), out$query])
as.character(gene_names_mat_poisson[clus,]
)
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[as.character(gene_names_mat_poisson[clus,]
), out$query, ])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,]
), out$query), ])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
indices_mat_poisson=matrix(0,dim(topics_theta)[2],10);
for(k in 1:dim(topics_theta)[2])
{
temp_mat <- KL_score_poisson[[k]][,-k];
vec <- apply(temp_mat, 1, function(x) min(x))
indices_mat_poisson[k,] = order(vec, decreasing = TRUE)[1:50]
}
indices_mat_poisson=matrix(0,dim(topics_theta)[2],50);
for(k in 1:dim(topics_theta)[2])
{
temp_mat <- KL_score_poisson[[k]][,-k];
vec <- apply(temp_mat, 1, function(x) min(x))
indices_mat_poisson[k,] = order(vec, decreasing = TRUE)[1:50]
}
gene_snp_names_gtex <- data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gene_snp_names.txt',header=FALSE));
gene_names <- substring(gene_snp_names_gtex[,2],1,15);
gene_names_mat_poisson = matrix(gene_names[as.vector(indices_mat_poisson)],nrow=dim(topics_theta)[2]);
color=c("red","blue","cornflowerblue","black","cyan","darkblue",
"brown4","burlywood","darkgoldenrod1","darkgray","deepskyblue","darkkhaki",
"firebrick","darkorchid","hotpink","green","magenta","yellow", "azure1","azure4");
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[indices_to_consider];
new_genes
indices_to_consider
clus
gene_names_mat_poisson[clus,]
new_genes
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices
topics_theta[indices,]
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
new_genes
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
barplot(rep(1,15),col=color[1:15])
indices_mat_poisson=matrix(0,dim(topics_theta)[2],10);
for(k in 1:dim(topics_theta)[2])
{
temp_mat <- KL_score_poisson[[k]][,-k];
vec <- apply(temp_mat, 1, function(x) min(x))
indices_mat_poisson[k,] = order(vec, decreasing = TRUE)[1:10]
}
gene_snp_names_gtex <- data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gene_snp_names.txt',header=FALSE));
gene_names <- substring(gene_snp_names_gtex[,2],1,15);
gene_names_mat_poisson = matrix(gene_names[as.vector(indices_mat_poisson)],nrow=dim(topics_theta)[2]);
color=c("red","blue","cornflowerblue","black","cyan","darkblue",
"brown4","burlywood","darkgoldenrod1","darkgray","deepskyblue","darkkhaki",
"firebrick","darkorchid","hotpink","green","magenta","yellow", "azure1","azure4");
clus <- 15
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
clus <- 14
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 13
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 12
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 11
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 10
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 9
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 8
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 7
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 6
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 5
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 4
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 3
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 2
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
clus <- 1
gene_names_mat_poisson[clus,]
indices <- sapply(1:length(gene_names_mat_poisson[clus,]), function(n) grep(gene_names_mat_poisson[clus,n],gene_names))
indices_to_consider <- which(apply(topics_theta[indices,],1, function(x) which.max(x))==clus);
new_genes <- gene_names_mat_poisson[clus,indices_to_consider];
lapply(1:length(new_genes), function(n) out[grep(as.character(new_genes[n]), out$query),])
lapply(1:length(gene_names_mat_poisson[clus,]
), function(n) out[grep(as.character(gene_names_mat_poisson[clus,n]
), out$query), ])
Inf
Inf > Inf
-Inf > -Inf
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
library(data.table)
library(limma)
library(philentropy)
library(maptpx)
data= data.frame(fread('/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/gtex_thinned_version_1.txt'))[,-1];
samples_id=read.table("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/samples_id.txt");
test_indices <- which(samples_id[,3]=='Heart - Left Ventricle' | samples_id[,3]=='Muscle - Skeletal');
test_indices_sampled <- sample(test_indices, 50, replace=FALSE);
samples <- data[,test_indices_sampled];
col = c(rgb(seq(0,1,length=15),1,seq(0,1,length=15)), rgb(1,seq(1,0,length=15),seq(1,0,length=15)));
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
librray(gplots)
library(gplots)
png(filename="../plots/heart_muscle_hierarchical_heatmap_average.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="average"));
dev.off()
png(filename="../plots/heart_muscle_hierarchical_heatmap_complete.png")
heatmap.2(distance(t(samples),method="euclidean"),labCol=samples_id[test_indices_sampled,3],labRow=samples_id[test_indices_sampled,3],scale="none", trace="none", distfun=function(x) dist(x,method="euclidean"), col=col, hclustfun = function(x) hclust(x,method="complete"));
dev.off()
library(maptpx)
test_data <- read.table('test_data.txt')
head(test_data)
out <- topics(test_data,K=4,tol=0.01);
setwd('/Users/kushal/Documents/count-clustering/test/')
library(maptpx)
test_data <- read.table('test_data.txt')
head(test_data)
out <- topics(test_data,K=4,tol=0.01);
source('~/Documents/count-clustering/test/test_code.R')
source('~/Documents/count-clustering/test/test_code.R')
load(maptpx)
library(maptpx)
debugSource('~/Documents/maptpx/R/tpx.R')
source('~/Documents/count-clustering/test/test_code.R')
